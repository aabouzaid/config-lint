---
version: 1
description: Terraform rules
type: Terraform
files:
  - "*.tf"
  - "*.tfvars"
rules:

  - id: SG_WORLD_INGRESS
    resource: aws_security_group
    message: Security group should not allow ingress from 0.0.0.0/0 or ::/0
    severity: WARNING
    assertions:
      - not:
        - or:
          - key: "ingress[].cidr_blocks[]"
            op: contains
            value: "0.0.0.0/0"
          - key: "ingress[].ipv6_cidr_blocks[]"
            op: contains
            value: "::/0"
    tags:
      - sg
      - ec2

  - id: SG_WORLD_EGRESS
    resource: aws_security_group
    message: Security group should not allow egress to 0.0.0.0/0 or ::/0
    severity: WARNING
    assertions:
      - not:
        - or:
          - key: "egress[].cidr_blocks[]"
            op: contains
            value: "0.0.0.0/0"
          - key: "egress[].ipv6_cidr_blocks[]"
            op: contains
            value: "::/0"
    tags:
      - sg
      - ec2

  # Note: 
  # the rule assertion here is duplicated to function in both terraform 11 and 12.
  # `` registers the variable correctly in tf 11
  # '' registers the variable correctly in tf 12
  # the alternative for each tf version will return a false negative (always passes), so it doesnt affect the test
  - id: SG_SSH_WORLD_INGRESS
    resource: aws_security_group
    message: Security group should not allow SSH ingress from 0.0.0.0/0 or ::/0
    severity: FAILURE
    assertions:
      - not:
        - or:
          - key: "ingress[?(from_port=='22')].cidr_blocks[]"
            op: contains
            value: "0.0.0.0/0"
          - key: "ingress[?(from_port=='22')].ipv6_cidr_blocks[]"
            op: contains
            value: "::/0"
      - not:
        - or:
          - key: "ingress[?(from_port==`22`)].cidr_blocks[]"
            op: contains
            value: "0.0.0.0/0"
          - key: "ingress[?(from_port==`22`)].ipv6_cidr_blocks[]"
            op: contains
            value: "::/0"
    tags:
      - sg
      - ec2

  # Note: 
  # the rule assertion here is duplicated to function in both terraform 11 and 12.
  # `` registers the variable correctly in tf 11
  # '' registers the variable correctly in tf 12
  # the alternative for each tf version will return a false negative (always passes), so it doesnt affect the test
  - id: SG_RDP_WORLD_INGRESS
    resource: aws_security_group
    message: Security group should not allow RDP ingress from 0.0.0.0/0 or ::/0
    severity: FAILURE
    assertions:
      - not:
        - or:
          - key: "ingress[?(from_port=='3389')].cidr_blocks[]"
            op: contains
            value: "0.0.0.0/0"
          - key: "ingress[?(from_port=='3389')].ipv6_cidr_blocks[]"
            op: contains
            value: "::/0"
      - not:
        - or:
          - key: "ingress[?(from_port==`3389`)].cidr_blocks[]"
            op: contains
            value: "0.0.0.0/0"
          - key: "ingress[?(from_port==`3389`)].ipv6_cidr_blocks[]"
            op: contains
            value: "::/0"
    tags:
      - sg
      - ec2

  - id: SG_NON_32_INGRESS
    resource: aws_security_group
    message: Security group should not allow ingress from CIDR block that does not end in /32
    severity: WARNING
    assertions:
      - every:
          key: "ingress[].cidr_blocks[]"
          expressions:
            - key: "@"
              op: regex
              value: .*/32$
    tags:
      - sg
      - ec2

  - id: SG_INGRESS_PORT_RANGE
    resource: aws_security_group
    message: Security group ingress should specify single port instead of range
    severity: WARNING
    assertions:
      - key: "ingress[?(from_port!=to_port)]"
        op: empty
    tags:
      - sg
      - ec2

  - id: SG_EGRESS_PORT_RANGE
    resource: aws_security_group
    message: Security group egress should specify single port instead of range
    severity: WARNING
    assertions:
      - key: "egress[?(from_port!=to_port)]"
        op: empty
    tags:
      - sg
      - ec2

  - id: SG_MISSING_EGRESS
    resource: aws_security_group
    message: Security group should specify egress rules
    severity: WARNING
    assertions:
      - key: "egress"
        op: present
    tags:
      - sg
      - ec2

  - id: SG_INGRESS_ALL_PROTOCOLS
    resource: aws_security_group
    message: Best practices recommend not opening all protocols and ports to ingress traffic
    severity: WARNING
    assertions:
      - not:
        - key: "ingress[].protocol"
          op: contains
          value: "-1"
    tags:
      - sg

  - id: SG_EGRESS_ALL_PROTOCOLS
    resource: aws_security_group
    message: Best practices recommend not opening all protocols and ports to egress traffic
    severity: WARNING
    assertions:
      - not:
        - key: "egress[].protocol"
          op: contains
          value: "-1"
    tags:
      - sg

  - id: CLOUDFRONT_DISTRIBUTION_LOGGING
    message: CloudFront Distribution must configure logging
    resource: aws_cloudfront_distribution
    severity: FAILURE
    assertions:
      - key: logging_config
        op: present
    tags:
      - cloudfront

  - id: CLOUDFRONT_DISTRIBUTION_ORIGIN_POLICY
    message: CloudFront Distribution custom_origin_config origin_protocol_policy should be https-only
    resource: aws_cloudfront_distribution
    severity: FAILURE
    assertions:
      - or:
        - key: "origin[].custom_origin_config"
          op: absent
        - key: "origin[].custom_origin_config[].origin_protocol_policy"
          op: contains
          value: https-only
    tags:
      - cloudfront

  - id: CLOUDFRONT_DISTRIBUTION_PROTOCOL
    message: CloudFront Distribution should not allow all protocols
    resource: aws_cloudfront_distribution
    severity: FAILURE
    assertions:
      - key: "default_cache_behavior[].viewer_protocol_policy"
        op: does-not-contain
        value: allow-all
      - key: "ordered_cache_behavior[].viewer_protocol_policy"
        op: does-not-contain
        value: allow-all
    tags:
      - cloudfront

  - id: IAM_ROLE_NOT_ACTION
    message: Should not use NotAction in assume policy document
    resource: aws_iam_role
    severity: WARNING
    assertions:
      - none:
          key: assume_role_policy.Statement[]
          expressions:
            - key: NotAction
              op: present
    tags:
      - iam
      - role

  - id: IAM_ROLE_NOT_PRINCIPAL
    message: Should not use NotPrincipal in role assume policy document
    resource: aws_iam_role
    severity: WARNING
    assertions:
      - none:
          key: assume_role_policy.Statement[]
          expressions:
            - key: NotPrincipal
              op: present
    tags:
      - iam
      - role

  - id: IAM_ROLE_WILDCARD_ACTION
    message: Should not use wildcard action in role assume policy document
    resource: aws_iam_role
    severity: FAILURE
    assertions:
      - none:
          key: assume_role_policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Action
              op: contains
              value: "*"
    tags:
      - iam
      - role

  - id: IAM_ROLE_POLICY_NOT_ACTION
    message: Should not use NotAction in IAM policy
    resource: aws_iam_role_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotAction
              op: present
    tags:
      - iam
      - role
      - policy

  - id: IAM_ROLE_POLICY_NOT_RESOURCE
    message: Should not use NotResource in IAM policy
    resource: aws_iam_role_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotResource
              op: present
    tags:
      - iam
      - role
      - policy

  - id: IAM_ROLE_POLICY_WILDCARD_ACTION
    message: Should not use wildcard action in an Allow IAM policy
    resource: aws_iam_role_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Action
              op: contains
              value: "*"
    tags:
      - iam
      - role
      - policy

  - id: IAM_ROLE_POLICY_WILDCARD_RESOURCE
    message: Should not use wildcard resource in an Allow IAM policy
    resource: aws_iam_role_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Resource
              op: contains
              value: "*"
    tags:
      - iam
      - role
      - policy

  - id: IAM_POLICY_NOT_ACTION
    message: Should not use NotAction in IAM policy
    resource: aws_iam_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotAction
              op: present
    tags:
      - iam
      - policy

  - id: IAM_POLICY_NOT_RESOURCE
    message: Should not use NotResource in IAM policy
    resource: aws_iam_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotResource
              op: present
    tags:
      - iam
      - policy

  - id: IAM_POLICY_WILDCARD_ACTION
    message: Should not use wildcard action in an Allow IAM policy
    resource: aws_iam_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Action
              op: contains
              value: "*"
    tags:
      - iam
      - policy

  - id: IAM_POLICY_WILDCARD_RESOURCE
    message: Should not use wildcard resource in an Allow IAM policy
    resource: aws_iam_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Resource
              op: contains
              value: "*"
    tags:
      - iam
      - policy

  - id: ELB_ACCESS_LOGGING
    message: ELB should enable access logging
    resource: aws_elb
    severity: WARNING
    assertions:
      # Check if 'access_logs' is present and if it is then we can check to see if the 
      # key 'enabled' exists within the 'access_logs' array.
      # If it does NOT exist, then the value is True by default.
      # If it does exist, then the value should be set to True.
      - key: access_logs
        op: present
      - or:
        - every:
            key: access_logs[]
            expressions:
              - key: enabled
                op: absent
        - every:
            key: access_logs[]
            expressions:
              - key: enabled
                op: is-true
    tags:
      - elb

  - id: S3_BUCKET_ACL
    message: S3 Bucket should not be public
    resource: aws_s3_bucket
    severity: FAILURE
    assertions:
      - key: acl
        op: not-in
        value: public-read,public-read-write
    tags:
      - s3

  - id: S3_NOT_ACTION
    message: Should not use NotAction in S3 bucket policy
    resource: aws_s3_bucket_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotAction
              op: present
    tags:
      - policy
      - s3

  - id: S3_NOT_PRINCIPAL
    message: Should not use NotPrincipal in S3 bucket policy
    resource: aws_s3_bucket_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotPrincipal
              op: present
    tags:
      - policy
      - s3

  - id: S3_BUCKET_POLICY_WILDCARD_PRINCIPAL
    message: Should not use wildcard Principal in an Allow S3 bucket policy
    resource: aws_s3_bucket_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Principal
              op: contains
              value: "*"
    tags:
      - policy
      - s3

  - id: S3_BUCKET_POLICY_WILDCARD_ACTION
    message: Should not use wildcard Action in an Allow S3 bucket policy
    resource: aws_s3_bucket_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Action
              op: contains
              value: "*"
    tags:
      - policy
      - s3

  - id: S3_BUCKET_POLICY_ONLY_HTTPS
    message: Should only allow HTTPS access to a bucket.
    resource: aws_s3_bucket_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Condition.Bool."aws:SecureTransport"
              op: is-false
    tags:
      - policy
      - s3

  - id: S3_BUCKET_ENCRYPTION
    message: S3 bucket should be encrypted
    resource: aws_s3_bucket
    severity: FAILURE
    assertions:
      - key: "@"
        op: has-properties
        value: server_side_encryption_configuration
    tags:
      - s3

  - id: SNS_TOPIC_POLICY_WILDCARD_PRINCIPAL
    message: Should not use wildcard Principal in an Allow SNS topic policy
    resource: aws_sns_topic_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Principal
              op: contains
              value: "*"
    tags:
      - sns
      - policy

  - id: SNS_TOPIC_POLICY_NOT_ACTION
    message: Should not use NotAction in SNS topic policy
    resource: aws_sns_topic_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotAction
              op: present
    tags:
      - sns
      - policy

  - id: SNS_TOPIC_POLICY_NOT_PRINCIPAL
    message: Should not use NotPrincipal in SNS topic policy
    resource: aws_sns_topic_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotPrincipal
              op: present
    tags:
      - sns
      - policy

  - id: SQS_QUEUE_POLICY_WILDCARD_PRINCIPAL
    message: Should not use wildcard Principal in an Allow SQS queue policy
    resource: aws_sqs_queue_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Principal
              op: contains
              value: "*"
    tags:
      - sqs
      - policy

  - id: SQS_QUEUE_POLICY_WILDCARD_ACTION
    message: Should not use wildcard action in SQS queue policy
    resource: aws_sqs_queue_policy
    severity: FAILURE
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Action
              op: contains
              value: "*"
    tags:
      - sqs
      - policy

  - id: SQS_QUEUE_POLICY_NOT_ACTION
    message: Should not use NotAction in SQS queue policy
    resource: aws_sqs_queue_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotAction
              op: present
    tags:
      - sqs
      - policy

  - id: SQS_QUEUE_POLICY_NOT_PRINCIPAL
    message: Should not use NotPrincipal in SQS queue policy
    resource: aws_sqs_queue_policy
    severity: WARNING
    assertions:
      - none:
          key: policy.Statement[]
          expressions:
            - key: NotPrincipal
              op: present
    tags:
      - sqs
      - policy

  - id: SQS_QUEUE_ENCRYPTION
    message: SQSQueue should use encryption
    resource: aws_sqs_queue
    severity: FAILURE
    assertions:
      - key: "@"
        op: has-properties
        value: kms_master_key_id
    tags:
      - sqs

  - id: IAM_USER_POLICY
    message: IAM User Policy should not be used (make user a member of group instead)
    resource: aws_iam_user_policy
    severity: FAILURE
    assertions:
      - key: "@"
        op: absent
    tags:
      - iam

  - id: IAM_USER_POLICY_ATTACHMENT
    message: IAM user should not have policies attached (make user a member of a group instead)
    resource: aws_iam_user_policy_attachment
    severity: FAILURE
    assertions:
      - key: "@"
        op: absent
    tags:
      - iam

  # FIXME really want to check that each user appears in at least one group
  - id: IAM_USER_GROUP
    message: IAM User should be in at least one group
    resource: aws_iam_group_membership
    severity: FAILURE
    assertions:
      - key: group
        op: not-empty
      - key: users
        op: not-empty
    tags:
      - iam

  - id: LAMBDA_PERMISSION_INVOKE_ACTION
    message: Lambda permission should allow only lambda:InvokeAction
    resource: aws_lambda_permission
    severity: WARNING
    assertions:
      - key: action
        op: eq
        value: lambda:InvokeFunction
    tags:
      - lambda

  - id: LAMBDA_PERMISSION_WILDCARD_PRINCIPAL
    message: Lambda permission should not have wildcard principal
    resource: aws_lambda_permission
    severity: FAILURE
    assertions:
      - key: principal
        op: does-not-contain
        value: "*"
    tags:
      - lambda

  - id: LAMBDA_FUNCTION_ENCRYPTION
    message: Lambda function should specify kms_key_arn to use a non-default service key
    resource: aws_lambda_function
    severity: WARNING
    assertions:
      - key: kms_key_arn
        op: present
    tags:
      - lambda

  - id: WAF_WEB_ACL
    message: Default action for WAF should not be ALLOW
    resource: aws_waf_web_acl
    severity: FAILURE
    assertions:
      - none:
          key: default_action
          expressions:
            - key: type
              op: eq
              value: ALLOW
    tags:
      - waf

  - id: ALB_LISTENER_HTTPS
    message: ALB listener should use HTTPS
    resources:
      - aws_alb_listener
      - aws_lb_listener
    severity: FAILURE
    assertions:
      - key: port
        op: eq
        value: 443
      - key: protocol
        op: regex
        value: "(?i)HTTPS"
      - key: ssl_policy
        op: present
      - key: certificate_arn
        op: present
    tags:
      - alb
      - lb

  - id: ALB_LISTENER_SSL_POLICY
    message: ALB listener shouldn't use outdated Predefined Security Policies
    resources:
      - aws_alb_listener
      - aws_lb_listener
    severity: FAILURE
    assertions:
      - key: ssl_policy
        op: not-in
        value: ELBSecurityPolicy-2015-05,ELBSecurityPolicy-2015-03,ELBSecurityPolicy-2015-02
      - key: ssl_policy
        op: not-in
        value: ELBSecurityPolicy-2014-10,ELBSecurityPolicy-2014-01
      - key: ssl_policy
        op: not-in
        value: ELBSecurityPolicy-2011-08
    tags:
      - alb
      - lb

  - id: ALB_ACCESS_LOGS
    message: ALB should enable access logs
    resources:
      - aws_alb
      - aws_lb
    severity: FAILURE
    assertions:
      - key: access_logs
        op: present
      - every:
          key: access_logs
          expressions:
            - key: enabled
              op: is-true
    tags:
      - alb
      - lb

  - id: AMI_VOLUMES_ENCRYPTED
    message: Volumes should be encrypted for aws_ami
    resource: aws_ami
    severity: FAILURE
    assertions:
      - every:
         key: ebs_block_device
         expressions:
           - key: encrypted
             op: is-true
    tags:
      - ami

  - id: AMI_COPY_SNAPSHOTS_ENCRYPTED
    message: Destination snapshots should be encrypted for aws_ami_copy
    resource: aws_ami_copy
    severity: FAILURE
    assertions:
      - key: encrypted
        op: is-true
    tags:
      - ami

  - id: CLOUDTRAIL_ENCRYPTION
    message: CloudTrail should specify a non-default KMS Key
    resource: aws_cloudtrail
    severity: WARNING
    assertions:
      - key: kms_key_id
        op: present
    tags:
      - cloudtrail

  - id: CODEBUILD_PROJECT_ENCRYPTION
    message: CodeBuild Project should be encrypted
    resource: aws_codebuild_project
    severity: FAILURE
    assertions:
      - key: encryption_key
        op: present
    tags:
      - codebuild

  - id: CODEBUILD_PROJECT_ARTIFACT_ENCRYPTION
    message: CodeBuild Project artifacts should be encrypted
    resource: aws_codebuild_project
    severity: FAILURE
    assertions:
      - not:  
        - every: # artifacts are required; encryption must be enabled
            key: artifacts[]
            expressions:
              - key: encryption_disabled
                op: is-true
        - and: # If 2nd artifacts exist, encryption must be enabled
          - key: secondary_artifacts
            op: present
          - every:
              key: secondary_artifacts[]
              expressions:
                - key: encryption_disabled
                  op: is-true
        - and: # If s3 logs exist, encryption must be enabled
          - key: s3_logs 
            op: present
          - every:
              key: s3_logs[]
              expressions:
                - key: encryption_disabled
                  op: is-true
    tags:
      - codebuild

  - id: CODEPIPELINE_ENCRYPTION
    message: CodePipeline should specify a non-default KMS Key to encrypt artifacts
    resource: aws_codepipeline
    severity: WARNING
    assertions:
      - every:
          key: artifact_store
          expressions:
            - key: encryption_key
              op: present
    tags:
      - codepipeline

  - id: DB_INSTANCE_ENCRYPTION
    message: DB Instance should have storage_encrypted set to True
    resource: aws_db_instance
    severity: FAILURE
    assertions:
      - or:
          - key: storage_encrypted
            op: is-true
          - key: replicate_source_db
            op: present
    tags:
      - rds

  - id: REPLICA_DB_INSTANCE_ENCRYPTION
    message: Replica DB Instance should specify a KMS Key
    resource: aws_db_instance
    severity: WARNING
    assertions:
      - or:
        - key: storage_encrypted
          op: present
        - and:
          - key: replicate_source_db
            op: present
          - key: kms_key_id
            op: present
    tags:
      - rds

  - id: RDS_CLUSTER_ENCYPTION
    message: RDS Cluster should have storage_encrypted set to True
    resource: aws_rds_cluster
    severity: FAILURE
    assertions:
      - or:
        - key: storage_encrypted
          op: is-true
        # serverless engine_mode has encryption enabled by default
        - and:
          - key: engine_mode
            op: eq
            value: serverless
          - key: storage_encrypted
            op: absent
    tags:
      - rds

  - id: EBS_BLOCK_DEVICE_ENCRYPTED
    message: EBS block devices should use encryption
    resource: aws_instance
    severity: FAILURE
    assertions:
      - every:
          key: ebs_block_device
          expressions:
            - key: encrypted
              op: is-true
    tags:
      - ec2
      - ebs

  - id: EBS_VOLUME_ENCRYPTION
    message: EBS Volume should be encrypted
    resource: aws_ebs_volume
    severity: FAILURE
    assertions:
      - key: encrypted
        op: is-true
    tags:
      - ec2
      - ebs

  - id: EFS_ENCRYPTED
    message: EFS should be encrypted
    resource: aws_efs_file_system
    severity: FAILURE
    assertions:
      - and:
        - key: encrypted
          op: is-true
    tags:
      - efs

  - id: KINESIS_FIREHOSE_DELIVERY_STREAM_ENCRYPTION
    message: KinesisFirehoseDeliveryStream should use encrytion
    resource: aws_kinesis_firehose_delivery_stream
    severity: FAILURE
    assertions:
      # Either `kinesis_source_configuration` or `server_side_encryption` should be present
      # but not both. Server-side encryption should not be enabled when a kinesis stream is
      # configured as the source of the firehose delivery stream.
      - xor:
        - key: kinesis_source_configuration
          op: present
        - key: server_side_encryption
          op: present
      # Every time 'server_side_encryption' is present then is needs to be set to True
      - every:
          key: server_side_encryption
          expressions:
            - key: enabled
              op: is-true
      # Every time 's3_configuration' is present then is needs to be set to True
      - every:
          key: s3_configuration
          expressions:
            - key: kms_key_arn
              op: present
      # Every time 'extended_s3_configuration' is present then is needs to be set to True
      - every:
          key: extended_s3_configuration
          expressions:
            - key: kms_key_arn
              op: present
    tags:
      - firehose

  - id: KINESIS_STREAM_ENCRYPTION
    message: Kinesis streams should specify the encryption type as KMS
    resource: aws_kinesis_stream
    severity: FAILURE
    assertions:
      - key: encryption_type
        op: eq
        value: KMS
    tags:
      - kinesis

  - id: KINESIS_STREAM_KMS
    message: Kinesis streams should be associated with a kms key
    resource: aws_kinesis_stream
    severity: WARNING
    assertions:
      - key: kms_key_id
        op: present
    tags:
      - kinesis

  - id: REDSHIFT_CLUSTER_ENCRYPTION
    message: RedshiftCluster should use encryption
    resource: aws_redshift_cluster
    severity: FAILURE
    assertions:
      - key: encrypted
        op: is-true
    tags:
      - redshift

  - id: REDSHIFT_CLUSTER_KMS_KEY_ID
    message: RedshiftCluster should specify kms_key_id
    resource: aws_redshift_cluster
    severity: WARNING
    assertions:
      - key: kms_key_id
        op: present
    tags:
      - redshift

  - id: REDSHIFT_CLUSTER_ENHANCED_VPC_ROUTING
    message: RedshiftCluster should use enhanced vpc routing
    resource: aws_redshift_cluster
    severity: WARNING
    assertions:
      - key: enhanced_vpc_routing
        op: is-true

  - id: REDSHIFT_CLUSTER_PARAMETER_GROUP_REQUIRE_SSL
    message: RedshiftCluster Parameter Group should set require_ssl to true
    resource: aws_redshift_parameter_group
    severity: WARNING
    assertions:
      - key: parameter
        op: present
      - every:
          key: parameter
          expressions:
            - key: name
              op: eq
              value: require_ssl
            - key: value
              op: is-true

  - id: REDSHIFT_CLUSTER_AUDIT_LOGGING
    message: RedshiftCluster should have audit logging enabled
    resource: aws_redshift_cluster
    severity: WARNING
    assertions:
      - key: logging
        op: present
      - every:
          key: logging
          expressions:
            - key: enable
              op: is-true

  - id: REDSHIFT_CLUSTER_PUBLICLY_ACCESSIBLE
    message: RedshiftCluster should not be publicly accessible
    resource: aws_redshift_cluster
    severity: FAILURE
    assertions:
      - key: publicly_accessible
        op: is-false
    tags:
      - redshift

  - id: S3_BUCKET_OBJECT_ENCRYPTION
    message: S3 Bucket Object should be encrypted
    resource: aws_s3_bucket_object
    severity: FAILURE
    assertions:
      - or:
        - key: kms_key_id
          op: present
        - key: server_side_encryption
          op: present
    tags:
      - s3

  - id: ECS_ENVIRONMENT_SECRETS
    message: Environment for ECS task definition should not include AWS secrets
    resource: aws_ecs_task_definition
    severity: FAILURE
    # this rule fails if it finds a regex match for either the Access Key ID and/or the Secret Access Key
    assertions:
      - not:
        - some:
            key: container_definitions[].environment[]
            expressions:
              # Check if the string starts with any known 4 character ACCESS_KEY sequence
              # and is 20 capital alpha-numeric characters long in total
              - key: value
                op: regex
                value: "^(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}$"
        - some:
            key: container_definitions[].environment[]
            expressions:
              - and:
                # Check if the string is exactly 40 characters long
                - key: value
                  op: regex
                  value: "^.{40}$"
                # Check if the string contains only alpha-numeric-slash-plus characters with at least 1 / or +
                - key: value
                  op: regex
                  value: "^[a-zA-Z0-9/+]+[/+]+[a-zA-Z0-9/+]+$"
    tags:
      - ecs

  - id: LAMBDA_ENVIRONMENT_SECRETS
    message: Environment for Lambda function should not include AWS secrets
    resource: aws_lambda_function
    severity: FAILURE
    # this rule fails if it finds a regex match for either the Access Key ID and/or the Secret Access Key
    assertions:
      - not:
        - some:
            key: "environment[].variables[]|[0]|values(@)"
            expressions:
              # Check if the string starts with any known 4 character ACCESS_KEY sequence
              # and is 20 capital alpha-numeric characters long in total
              - key: "@"
                op: regex
                value: "^(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}$"
        - some:
            key: "environment[].variables[]|[0]|values(@)"
            expressions:
              - and:
                # Check if the string is exactly 40 characters long
                - key: "@"
                  op: regex
                  value: "^.{40}$"
                # Check if the string contains only alpha-numeric-slash-plus characters with at least 1 / or +
                - key: "@"
                  op: regex
                  value: "^[a-zA-Z0-9/+]+[/+]+[a-zA-Z0-9/+]+$"
    tags:
      - lambda

  - id: POLICY_VERSION
    message: Version in IAM Policy should be 2012-10-17
    resources:
      - aws_sns_topic_policy
      - aws_s3_bucket_policy
      - aws_sqs_queue_policy
      - aws_iam_policy
      - aws_iam_role_policy
    severity: FAILURE
    assertions:
      - key: policy.Version
        op: eq
        value: "2012-10-17"
    tags:
      - iam
      - policy

  - id: ASSUME_ROLEPOLICY_VERSION
    message: Version in IAM Policy should be 2012-10-17
    resource: aws_iam_role
    severity: FAILURE
    assertions:
      - key: assume_role_policy.Version
        op: eq
        value: "2012-10-17"
    tags:
      - iam
      - policy

  - id: BATCH_DEFINITION_PRIVILEGED
    message: Batch Job Definition Container Properties should not have Privileged set to true
    resource: aws_batch_job_definition
    severity: WARNING
    assertions:
      - not:
          - key: container_properties.privileged
            op: is-true
    tags:
      - batch

  - id: EC2_SUBNET_MAP_PUBLIC
    message: EC2 Subnet should not have MapPublicIpOnLaunch set to true
    resource: aws_subnet
    severity: WARNING
    assertions:
    - not:
      - key: map_public_ip_on_launch
        op: is-true
    tags:
      - ec2
      - subnet

  - id: ELASTICACHE_ENCRYPTION_REST
    message: ElastiCache ReplicationGroup should have encryption at rest enabled
    resource: aws_elasticache_replication_group
    severity: FAILURE
    assertions:
    - key: at_rest_encryption_enabled
      op: is-true
    tags:
      - elasticache

  - id: ELASTICACHE_ENCRYPTION_TRANSIT
    message: ElastiCache ReplicationGroup should have encryption in transit enabled
    resource: aws_elasticache_replication_group
    severity: FAILURE
    assertions:
    - key: transit_encryption_enabled
      op: is-true
    tags:
      - elasticache

  - id: ELASTICSEARCH_VPC
    message: Elasticsearch domain must be in a VPC
    resource: aws_elasticsearch_domain
    severity: FAILURE
    assertions:
      - key: vpc_options
        op: present
    tags:
      - elasticsearch
  
  - id: ELASTICSEARCH_ENCRYPTION_AT_REST
    message: Elasticsearch domain must have encryption at rest
    resource: aws_elasticsearch_domain
    severity: FAILURE
    assertions:
      - key: node_to_node_encryption.enabled
        op: is-true
    tags:
      - elasticsearch

  - id: ELASTICSEARCH_DOMAIN_POLICY_VERSION
    message: Elasticsearch domain policy must use version 2012-10-17
    resource: aws_elasticsearch_domain_policy
    severity: FAILURE
    assertions:
      - key: access_policies.Version
        op: eq
        value: "2012-10-17"
    tags:
      - elasticsearch
      - policy

  - id: ELASTICSEARCH_POLICY_WILDCARD_PRINCIPAL
    message: Elasticsearch allow policy should not use a wildcard princpal
    resource: aws_elasticsearch_domain_policy
    severity: FAILURE
    assertions:
      - none:
          key: access_policies.Statement[]
          expressions:
            - key: Effect
              op: eq
              value: Allow
            - key: Principal
              op: contains
              value: "*"
    tags:
      - elasticsearch
      - policy

#  - id: ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION
#    message: Elasticsearch domain must use node to node encryption
#    resource: aws_elasticsearch_domain
#    severity: FAILURE
#    assertions:
#    tags:
#      - elasticsearch

  - id: NEPTUNE_DB_ENCRYPTION
    message: Neptune database cluster storage should have encryption enabled
    resource: aws_neptune_cluster
    severity: FAILURE
    assertions:
    - key: storage_encrypted
      op: is-true
    tags:
      - neptune

  - id: RDS_PUBLIC_AVAILABILITY
    message: RDS instance should not be publicly accessible
    resource: aws_db_instance
    severity: FAILURE
    assertions:
    - not:
      - key: publicly_accessible
        op: is-true
    tags:
      - rds

  - id: AWS_DMS_ENDPOINT_ENCRYPTION
    message: AWS DMS Endpoint should have a kms key present
    resource: aws_dms_endpoint
    severity: WARNING
    assertions:
      - key: kms_key_arn
        op: present
    tags:
      - dms

  - id: AWS_EMR_CLUSTER_LOGGING
    message: AWS EMR Should have logging enabled
    resource: aws_emr_cluster
    severity: WARNING
    assertions:
      - key: log_uri
        op: present
    tags:
      - emr

  - id: AWS_KMS_KEY_ROTATION
    message: AWS KMS Key Rotation should be enabled
    resource: aws_kms_key
    severity: WARNING
    assertions:
      - key: enable_key_rotation
        op: is-true
    tags:
      - kms

  - id: SAGEMAKER_ENDPOINT_ENCRYPTION
    message: Sagemaker configuration should be encrypted
    resource: aws_sagemaker_endpoint_configuration
    severity: WARNING
    assertions:
      - key: kms_key_arn
        op: present
    tags:
      - sagemaker

  - id: SAGEMAKER_NOTEBOOK_ENCRYPTION
    message: Sagemaker Notebook should be encrypted
    resource: aws_sagemaker_notebook_instance
    severity: WARNING
    assertions:
      - key: kms_key_id
        op: present
    tags:
      - sagemaker

  # add KMS key policy version
  # ECR repository policy
  # add ElasticSearch domain access policy version
